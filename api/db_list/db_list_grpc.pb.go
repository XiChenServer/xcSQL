// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: db_list.proto

package db_list

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HashDatabase_RPUSH_FullMethodName  = "/api_db_list.HashDatabase/RPUSH"
	HashDatabase_LPUSH_FullMethodName  = "/api_db_list.HashDatabase/LPUSH"
	HashDatabase_LRANGE_FullMethodName = "/api_db_list.HashDatabase/LRANGE"
	HashDatabase_LINDEX_FullMethodName = "/api_db_list.HashDatabase/LINDEX"
	HashDatabase_LPOP_FullMethodName   = "/api_db_list.HashDatabase/LPOP"
	HashDatabase_RPOP_FullMethodName   = "/api_db_list.HashDatabase/RPOP"
	HashDatabase_LLEN_FullMethodName   = "/api_db_list.HashDatabase/LLEN"
)

// HashDatabaseClient is the client API for HashDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashDatabaseClient interface {
	RPUSH(ctx context.Context, in *RPUSHRequest, opts ...grpc.CallOption) (*RPUSHResponse, error)
	LPUSH(ctx context.Context, in *LPUSHRequest, opts ...grpc.CallOption) (*LPUSHResponse, error)
	LRANGE(ctx context.Context, in *LRANGERequest, opts ...grpc.CallOption) (*LRANGEResponse, error)
	LINDEX(ctx context.Context, in *LINDEXRequest, opts ...grpc.CallOption) (*LINDEXResponse, error)
	LPOP(ctx context.Context, in *LPOPRequest, opts ...grpc.CallOption) (*LPOPResponse, error)
	RPOP(ctx context.Context, in *RPOPRequest, opts ...grpc.CallOption) (*RPOPResponse, error)
	LLEN(ctx context.Context, in *LLENRequest, opts ...grpc.CallOption) (*LLENResponse, error)
}

type hashDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewHashDatabaseClient(cc grpc.ClientConnInterface) HashDatabaseClient {
	return &hashDatabaseClient{cc}
}

func (c *hashDatabaseClient) RPUSH(ctx context.Context, in *RPUSHRequest, opts ...grpc.CallOption) (*RPUSHResponse, error) {
	out := new(RPUSHResponse)
	err := c.cc.Invoke(ctx, HashDatabase_RPUSH_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) LPUSH(ctx context.Context, in *LPUSHRequest, opts ...grpc.CallOption) (*LPUSHResponse, error) {
	out := new(LPUSHResponse)
	err := c.cc.Invoke(ctx, HashDatabase_LPUSH_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) LRANGE(ctx context.Context, in *LRANGERequest, opts ...grpc.CallOption) (*LRANGEResponse, error) {
	out := new(LRANGEResponse)
	err := c.cc.Invoke(ctx, HashDatabase_LRANGE_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) LINDEX(ctx context.Context, in *LINDEXRequest, opts ...grpc.CallOption) (*LINDEXResponse, error) {
	out := new(LINDEXResponse)
	err := c.cc.Invoke(ctx, HashDatabase_LINDEX_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) LPOP(ctx context.Context, in *LPOPRequest, opts ...grpc.CallOption) (*LPOPResponse, error) {
	out := new(LPOPResponse)
	err := c.cc.Invoke(ctx, HashDatabase_LPOP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) RPOP(ctx context.Context, in *RPOPRequest, opts ...grpc.CallOption) (*RPOPResponse, error) {
	out := new(RPOPResponse)
	err := c.cc.Invoke(ctx, HashDatabase_RPOP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) LLEN(ctx context.Context, in *LLENRequest, opts ...grpc.CallOption) (*LLENResponse, error) {
	out := new(LLENResponse)
	err := c.cc.Invoke(ctx, HashDatabase_LLEN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashDatabaseServer is the server API for HashDatabase service.
// All implementations must embed UnimplementedHashDatabaseServer
// for forward compatibility
type HashDatabaseServer interface {
	RPUSH(context.Context, *RPUSHRequest) (*RPUSHResponse, error)
	LPUSH(context.Context, *LPUSHRequest) (*LPUSHResponse, error)
	LRANGE(context.Context, *LRANGERequest) (*LRANGEResponse, error)
	LINDEX(context.Context, *LINDEXRequest) (*LINDEXResponse, error)
	LPOP(context.Context, *LPOPRequest) (*LPOPResponse, error)
	RPOP(context.Context, *RPOPRequest) (*RPOPResponse, error)
	LLEN(context.Context, *LLENRequest) (*LLENResponse, error)
	mustEmbedUnimplementedHashDatabaseServer()
}

// UnimplementedHashDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedHashDatabaseServer struct {
}

func (UnimplementedHashDatabaseServer) RPUSH(context.Context, *RPUSHRequest) (*RPUSHResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPUSH not implemented")
}
func (UnimplementedHashDatabaseServer) LPUSH(context.Context, *LPUSHRequest) (*LPUSHResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPUSH not implemented")
}
func (UnimplementedHashDatabaseServer) LRANGE(context.Context, *LRANGERequest) (*LRANGEResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRANGE not implemented")
}
func (UnimplementedHashDatabaseServer) LINDEX(context.Context, *LINDEXRequest) (*LINDEXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LINDEX not implemented")
}
func (UnimplementedHashDatabaseServer) LPOP(context.Context, *LPOPRequest) (*LPOPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPOP not implemented")
}
func (UnimplementedHashDatabaseServer) RPOP(context.Context, *RPOPRequest) (*RPOPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RPOP not implemented")
}
func (UnimplementedHashDatabaseServer) LLEN(context.Context, *LLENRequest) (*LLENResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LLEN not implemented")
}
func (UnimplementedHashDatabaseServer) mustEmbedUnimplementedHashDatabaseServer() {}

// UnsafeHashDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashDatabaseServer will
// result in compilation errors.
type UnsafeHashDatabaseServer interface {
	mustEmbedUnimplementedHashDatabaseServer()
}

func RegisterHashDatabaseServer(s grpc.ServiceRegistrar, srv HashDatabaseServer) {
	s.RegisterService(&HashDatabase_ServiceDesc, srv)
}

func _HashDatabase_RPUSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPUSHRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).RPUSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_RPUSH_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).RPUSH(ctx, req.(*RPUSHRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_LPUSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPUSHRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).LPUSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_LPUSH_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).LPUSH(ctx, req.(*LPUSHRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_LRANGE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LRANGERequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).LRANGE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_LRANGE_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).LRANGE(ctx, req.(*LRANGERequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_LINDEX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LINDEXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).LINDEX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_LINDEX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).LINDEX(ctx, req.(*LINDEXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_LPOP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPOPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).LPOP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_LPOP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).LPOP(ctx, req.(*LPOPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_RPOP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPOPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).RPOP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_RPOP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).RPOP(ctx, req.(*RPOPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_LLEN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLENRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).LLEN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_LLEN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).LLEN(ctx, req.(*LLENRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashDatabase_ServiceDesc is the grpc.ServiceDesc for HashDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_db_list.HashDatabase",
	HandlerType: (*HashDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RPUSH",
			Handler:    _HashDatabase_RPUSH_Handler,
		},
		{
			MethodName: "LPUSH",
			Handler:    _HashDatabase_LPUSH_Handler,
		},
		{
			MethodName: "LRANGE",
			Handler:    _HashDatabase_LRANGE_Handler,
		},
		{
			MethodName: "LINDEX",
			Handler:    _HashDatabase_LINDEX_Handler,
		},
		{
			MethodName: "LPOP",
			Handler:    _HashDatabase_LPOP_Handler,
		},
		{
			MethodName: "RPOP",
			Handler:    _HashDatabase_RPOP_Handler,
		},
		{
			MethodName: "LLEN",
			Handler:    _HashDatabase_LLEN_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_list.proto",
}
