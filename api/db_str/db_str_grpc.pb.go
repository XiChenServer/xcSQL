// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: db_str.proto

package db_str

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	XcDB_Set_FullMethodName    = "/api_db_str.XcDB/Set"
	XcDB_Get_FullMethodName    = "/api_db_str.XcDB/Get"
	XcDB_Strlen_FullMethodName = "/api_db_str.XcDB/Strlen"
	XcDB_Append_FullMethodName = "/api_db_str.XcDB/Append"
)

// XcDBClient is the client API for XcDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XcDBClient interface {
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Strlen(ctx context.Context, in *StrlenRequest, opts ...grpc.CallOption) (*StrlenResponse, error)
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
}

type xcDBClient struct {
	cc grpc.ClientConnInterface
}

func NewXcDBClient(cc grpc.ClientConnInterface) XcDBClient {
	return &xcDBClient{cc}
}

func (c *xcDBClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, XcDB_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, XcDB_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcDBClient) Strlen(ctx context.Context, in *StrlenRequest, opts ...grpc.CallOption) (*StrlenResponse, error) {
	out := new(StrlenResponse)
	err := c.cc.Invoke(ctx, XcDB_Strlen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xcDBClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, XcDB_Append_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XcDBServer is the server API for XcDB service.
// All implementations must embed UnimplementedXcDBServer
// for forward compatibility
type XcDBServer interface {
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Strlen(context.Context, *StrlenRequest) (*StrlenResponse, error)
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	mustEmbedUnimplementedXcDBServer()
}

// UnimplementedXcDBServer must be embedded to have forward compatible implementations.
type UnimplementedXcDBServer struct {
}

func (UnimplementedXcDBServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedXcDBServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedXcDBServer) Strlen(context.Context, *StrlenRequest) (*StrlenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strlen not implemented")
}
func (UnimplementedXcDBServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedXcDBServer) mustEmbedUnimplementedXcDBServer() {}

// UnsafeXcDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XcDBServer will
// result in compilation errors.
type UnsafeXcDBServer interface {
	mustEmbedUnimplementedXcDBServer()
}

func RegisterXcDBServer(s grpc.ServiceRegistrar, srv XcDBServer) {
	s.RegisterService(&XcDB_ServiceDesc, srv)
}

func _XcDB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcDBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcDB_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcDBServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XcDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcDB_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcDBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XcDB_Strlen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrlenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcDBServer).Strlen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcDB_Strlen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcDBServer).Strlen(ctx, req.(*StrlenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XcDB_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XcDBServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XcDB_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XcDBServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XcDB_ServiceDesc is the grpc.ServiceDesc for XcDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XcDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_db_str.XcDB",
	HandlerType: (*XcDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _XcDB_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _XcDB_Get_Handler,
		},
		{
			MethodName: "Strlen",
			Handler:    _XcDB_Strlen_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _XcDB_Append_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_str.proto",
}
