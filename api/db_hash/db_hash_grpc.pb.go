// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.11.2
// source: db_hash.proto

package db_hash

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HashDatabase_HSet_FullMethodName = "/api_db_hash.HashDatabase/HSet"
	HashDatabase_HGet_FullMethodName = "/api_db_hash.HashDatabase/HGet"
)

// HashDatabaseClient is the client API for HashDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashDatabaseClient interface {
	HSet(ctx context.Context, in *HSetRequest, opts ...grpc.CallOption) (*HSetResponse, error)
	HGet(ctx context.Context, in *HGetRequest, opts ...grpc.CallOption) (*HGetResponse, error)
}

type hashDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewHashDatabaseClient(cc grpc.ClientConnInterface) HashDatabaseClient {
	return &hashDatabaseClient{cc}
}

func (c *hashDatabaseClient) HSet(ctx context.Context, in *HSetRequest, opts ...grpc.CallOption) (*HSetResponse, error) {
	out := new(HSetResponse)
	err := c.cc.Invoke(ctx, HashDatabase_HSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hashDatabaseClient) HGet(ctx context.Context, in *HGetRequest, opts ...grpc.CallOption) (*HGetResponse, error) {
	out := new(HGetResponse)
	err := c.cc.Invoke(ctx, HashDatabase_HGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashDatabaseServer is the server API for HashDatabase service.
// All implementations must embed UnimplementedHashDatabaseServer
// for forward compatibility
type HashDatabaseServer interface {
	HSet(context.Context, *HSetRequest) (*HSetResponse, error)
	HGet(context.Context, *HGetRequest) (*HGetResponse, error)
	mustEmbedUnimplementedHashDatabaseServer()
}

// UnimplementedHashDatabaseServer must be embedded to have forward compatible implementations.
type UnimplementedHashDatabaseServer struct {
}

func (UnimplementedHashDatabaseServer) HSet(context.Context, *HSetRequest) (*HSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSet not implemented")
}
func (UnimplementedHashDatabaseServer) HGet(context.Context, *HGetRequest) (*HGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGet not implemented")
}
func (UnimplementedHashDatabaseServer) mustEmbedUnimplementedHashDatabaseServer() {}

// UnsafeHashDatabaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashDatabaseServer will
// result in compilation errors.
type UnsafeHashDatabaseServer interface {
	mustEmbedUnimplementedHashDatabaseServer()
}

func RegisterHashDatabaseServer(s grpc.ServiceRegistrar, srv HashDatabaseServer) {
	s.RegisterService(&HashDatabase_ServiceDesc, srv)
}

func _HashDatabase_HSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).HSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_HSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).HSet(ctx, req.(*HSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HashDatabase_HGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashDatabaseServer).HGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashDatabase_HGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashDatabaseServer).HGet(ctx, req.(*HGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashDatabase_ServiceDesc is the grpc.ServiceDesc for HashDatabase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashDatabase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api_db_hash.HashDatabase",
	HandlerType: (*HashDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HSet",
			Handler:    _HashDatabase_HSet_Handler,
		},
		{
			MethodName: "HGet",
			Handler:    _HashDatabase_HGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_hash.proto",
}
